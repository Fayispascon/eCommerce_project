<%- include('../userLayouts/header.ejs') %>
<%- include('../userLayouts/pageHeader.ejs') %>

<!-- breadcrumb -->
<div class="container">
    <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-100 p-lr-0-lg">
        <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
            Home
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>

        <span class="stext-109 cl4">
            Shopping Cart
        </span>
    </div>
</div>

<!-- Shopping Cart -->
<form class="bg0 p-t-75 p-b-85">
    <div class="container">
        <div class="row">
            <div class="col-lg-10 col-xl-7 m-lr-auto m-b-50">
                <div class="m-l-25 m-r--38 m-lr-0-xl">
                    <div class="wrap-table-shopping-cart">
                        <table class="table-shopping-cart">
                            <tr class="table_head">
                                <th class="column-1">Product</th>
                                <th class="column-2"></th>
                                <th class="column-3">Price</th>
                                <th class="column-4">Quantity</th>
                                <th class="column-5">Total</th>
                            </tr>

                            <% if (cartData && cartData.items.length > 0) { %>
                                <% cartData.items.forEach((item) => { %>
                                    <tr class="table_row">
                                        <td class="column-1">
                                            <input type="hidden" id="productid" value="<%= item.productId._id %>">
                                            <div class="how-itemcart1 cart-remove">
                                                <img src="/uploads/<%= item.productId.images[0] %>" alt="<%= item.productId.name %>">
                                            </div>
                                        </td>
                                        <td class="column-2"><%= item.productId.name %></td>
                                        <td class="column-3" id="productPrice">₹ <%= item.productId.price.toFixed(2) %></td>
                                        <td class="column-4">
                                            <input type="hidden" value="<%= item.productId.stock %>" id="productStock">
                                            <div class="wrap-num-product flex-w m-l-auto m-r-0">
                                                <div class="btn-num-product-down cl8 hov-btn3 trans-04 flex-c-m " id="decrease-btn">
                                                    <i class="fs-16 zmdi zmdi-minus"></i>
                                                </div>
                                                <input class="mtext-104 cl3 txt-center num-product" type="number" id="quantity" name="num-product1" value="<%= item.quantity %>" min="1">
                                                <div class="btn-num-product-up cl8 hov-btn3 trans-04 flex-c-m" id="increase-btn">
                                                    <i class="fs-16 zmdi zmdi-plus"></i>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="column-5">₹ <%= (item.productId.price * item.quantity).toFixed(2) %></td>
                                    </tr>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="5">Your cart is empty.</td>
                                </tr>
                            <% } %>

                        </table>
                    </div>

                    <div class="flex-w flex-sb-m bor15 p-t-18 p-b-15 p-lr-40 p-lr-15-sm">
                        <div class="flex-w flex-m m-r-20 m-tb-5">
                            <input class="stext-104 cl2 plh4 size-117 bor13 p-lr-20 m-r-10 m-tb-5" type="text" name="coupon" placeholder="Coupon Code">
                            <div class="flex-c-m stext-101 cl2 size-118 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer m-tb-5">
                                Apply coupon
                            </div>
                        </div>

                        <div class="flex-c-m stext-101 cl2 size-119 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer m-tb-10">
                            Update Cart
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm-10 col-lg-7 col-xl-5 m-lr-auto m-b-50">
                <div class="bor10 p-lr-40 p-t-30 p-b-40 m-l-63 m-r-40 m-lr-0-xl p-lr-15-sm">
                    <h4 class="mtext-109 cl2 p-b-30">
                        Cart Totals
                    </h4>

                    <div class="flex-w flex-t bor12 p-t-15 p-b-30">
                        <div class="size-208 w-full-ssm">
                            <span class="stext-110 cl2">
                                Shipping:
                            </span>
                        </div>

                        <div class="size-209 p-r-18 p-r-0-sm w-full-ssm">
                            <p class="stext-111 cl6 p-t-2">
                                There are no shipping methods available. Please double-check your address, or contact us if you need any help.
                            </p>

                            <div class="p-t-15">
                                <span class="stext-112 cl8">
                                    Calculate Shipping
                                </span>
                                <div class="bor8 bg0 m-b-12">
                                    <input class="stext-111 cl8 plh3 size-111 p-lr-15" type="text" name="state" placeholder="State / Country">
                                </div>
                                <div class="bor8 bg0 m-b-22">
                                    <input class="stext-111 cl8 plh3 size-111 p-lr-15" type="text" name="postcode" placeholder="Postcode / Zip">
                                </div>
                                <div class="flex-w">
                                    <div class="flex-c-m stext-101 cl2 size-115 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer">
                                        Update Totals
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="flex-w flex-t p-t-27 p-b-33">
                        <div class="size-208">
                            <span class="mtext-101 cl2">
                                Total:
                            </span>
                        </div>
 
                        <div class="size-209 p-t-1">
                            <span class="mtext-110 cl2" id="totalPrice">
                                ₹ <%= totalPrice %>
                            </span>
                        </div>
                    </div>

                    <a href="/checkout" class="flex-c-m stext-101 cl0 size-116 bg3 bor14 hov-btn3 p-lr-15 trans-04 pointer">
                       Proceed to Checkout 
                    </a>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const quantityInputs = document.querySelectorAll('#quantity');
        const increaseButtons = document.querySelectorAll('#increase-btn');
        const decreaseButtons = document.querySelectorAll('#decrease-btn');
        const maxQuantity = 5;
    
        // Select the element to update the total price of the cart
        const totalPriceElement = document.getElementById('totalPrice');
        
        let cartTotal = parseFloat(totalPriceElement.textContent.replace('₹', '').trim());
    
        quantityInputs.forEach((quantityInput, index) => {
            const increaseBtn = increaseButtons[index];
            const decreaseBtn = decreaseButtons[index];
            const stock = parseInt(quantityInput.closest('tr').querySelector('#productStock').value);
            const unitPrice = parseFloat(quantityInput.closest('tr').querySelector('#productPrice').textContent.replace('₹', '').trim());
            const totalPriceElementForItem = quantityInput.closest('tr').querySelector('.column-5');
            const productId = quantityInput.closest('tr').querySelector('#productid').value;
    
            const updateButtonStates = () => {
                const currentQuantity = parseInt(quantityInput.value);
                const maxAllowedQuantity = Math.min(stock, maxQuantity);
    
                decreaseBtn.style.opacity = currentQuantity <= 1 ? '0.5' : '1';
                decreaseBtn.style.pointerEvents = currentQuantity <= 1 ? 'none' : 'auto';
    
                increaseBtn.style.opacity = currentQuantity >= maxAllowedQuantity ? '0.5' : '1';
                increaseBtn.style.pointerEvents = currentQuantity >= maxAllowedQuantity ? 'none' : 'auto';
    
                // Update the price for the item
                totalPriceElementForItem.textContent = `₹ ${(unitPrice * currentQuantity).toFixed(2)}`;
                
                // Update the total price of the cart
                cartTotal = Array.from(quantityInputs).reduce((total, input) => {
                    const row = input.closest('tr');
                    const price = parseFloat(row.querySelector('.column-3').textContent.replace('₹', '').trim());
                    const qty = parseInt(input.value);
                    return total + (price * qty);
                }, 0);
                
                totalPriceElement.textContent = `₹ ${cartTotal.toFixed(2)}`;
            };
    
            increaseBtn.addEventListener('click', (e) => {
                e.preventDefault();
                let currentQuantity = parseInt(quantityInput.value);
                if (currentQuantity < stock && currentQuantity < maxQuantity) {
                    quantityInput.value = currentQuantity + 1; // increase quantity
                    updateServerCart(productId, currentQuantity + 1);
                }
                updateButtonStates();
            });
    
            decreaseBtn.addEventListener('click', (e) => {
                e.preventDefault();
                let currentQuantity = parseInt(quantityInput.value);
                if (currentQuantity > 1) {
                    quantityInput.value = currentQuantity - 1; // decrease quantity
                    updateServerCart(productId, currentQuantity - 1);
                }
                updateButtonStates();
            });
    
            quantityInput.addEventListener('input', () => {
                const newQuantity = parseInt(quantityInput.value);
                if (newQuantity > 0 && newQuantity <= stock) {
                    updateServerCart(productId, newQuantity);
                } else {
                    quantityInput.value = 1;
                    updateServerCart(productId, 1);
                }
                updateButtonStates();
            });
    
            updateButtonStates();
        });
    });
    
    // Function to update cart in the database
    function updateServerCart(productId, newQuantity) {
        fetch('/updateCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productId: productId,
                newQuantity: newQuantity
            })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                showToast('Failed to update cart', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating cart:', error);
            showToast('Error updating cart', 'error');
        });
    }
    
    // Show toast messages
    function showToast(message, type) {
        Swal.fire({
            icon: type,
            title: message,
            timer: 2000,
            showConfirmButton: false,
        });
    }



// Add event listener to handle product removal
const cartItems = document.querySelectorAll('.cart-remove');
cartItems.forEach((item) => {
    item.addEventListener('click', () => {
        const productId = document.getElementById('productid').value;
        Swal.fire({
            title: 'Do you want to remove this item?',
            showCancelButton: true,
            confirmButtonText: 'Yes'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/deleteItem?id=${productId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                    .then((response) => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then((data) => {
                        if (data.success) {
                            location.reload();
                        } else {
                            Swal.fire('Failed to remove item from the cart', '', 'error');
                        }
                    })
                    .catch((error) => {
                        console.error('Fetch error:', error);
                        Swal.fire('An error occurred', '', 'error');
                    });
            }
        });
    });
});





    </script>
    
<%- include('../userLayouts/footer.ejs') %>
